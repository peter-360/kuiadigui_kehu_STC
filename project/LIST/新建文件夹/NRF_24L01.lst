C51 COMPILER V9.01   NRF_24L01                                                             09/14/2018 10:56:56 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE NRF_24L01
OBJECT MODULE PLACED IN ..\hex\NRF_24L01.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\user\NRF_24L01.C LARGE BROWSE INCDIR(..\user) DEBUG OBJECTEXTEND PRINT(.
                    -\LIST\NRF_24L01.lst) OBJECT(..\hex\NRF_24L01.obj)

line level    source

   1          /******************************************************************************/
   2          /*                        -- 深圳安信可科技有限公司 --                        */
   3          /*
   4          //  文件名：                                                              
   5          //  说明：                                                                  
   6          //  编写人员：                                                                   
   7          //  编写日期：                                                              
   8          //  程序维护：
   9          //  维护记录：
  10          //
  11          //                                                          
  12          */ 
  13          // 免责声明：该程序仅用于学习与交流 
  14          // (c) Anxinke Corporation. All rights reserved.                                                          
             -     
  15          /******************************************************************************/
  16          #include "typedef.h"
  17          #include <intrins.h>
  18          #include <string.h>
  19          #include "NRF_24L01.h"
  20          #include "UART.H"
  21          #include "delay.h"
  22          #include "config.h"
*** ERROR C231 IN LINE 7 OF ..\USER\STC89C51RC_RD_PLUS.H: 'P4': redefinition
*** ERROR C231 IN LINE 8 OF ..\USER\STC89C51RC_RD_PLUS.H: 'P43': redefinition
*** ERROR C231 IN LINE 9 OF ..\USER\STC89C51RC_RD_PLUS.H: 'P42': redefinition
*** ERROR C231 IN LINE 10 OF ..\USER\STC89C51RC_RD_PLUS.H: 'P41': redefinition
*** ERROR C231 IN LINE 11 OF ..\USER\STC89C51RC_RD_PLUS.H: 'P40': redefinition
*** ERROR C231 IN LINE 21 OF ..\USER\STC89C51RC_RD_PLUS.H: 'IE2': redefinition
*** ERROR C231 IN LINE 24 OF ..\USER\STC89C51RC_RD_PLUS.H: 'WDT_CONTR': redefinition
*** ERROR C231 IN LINE 47 OF ..\USER\STC89C51RC_RD_PLUS.H: 'P0': redefinition
*** ERROR C231 IN LINE 48 OF ..\USER\STC89C51RC_RD_PLUS.H: 'P1': redefinition
*** ERROR C231 IN LINE 49 OF ..\USER\STC89C51RC_RD_PLUS.H: 'P2': redefinition
*** ERROR C231 IN LINE 50 OF ..\USER\STC89C51RC_RD_PLUS.H: 'P3': redefinition
*** ERROR C231 IN LINE 51 OF ..\USER\STC89C51RC_RD_PLUS.H: 'PSW': redefinition
*** ERROR C231 IN LINE 52 OF ..\USER\STC89C51RC_RD_PLUS.H: 'ACC': redefinition
*** ERROR C231 IN LINE 53 OF ..\USER\STC89C51RC_RD_PLUS.H: 'B': redefinition
*** ERROR C231 IN LINE 54 OF ..\USER\STC89C51RC_RD_PLUS.H: 'SP': redefinition
*** ERROR C231 IN LINE 55 OF ..\USER\STC89C51RC_RD_PLUS.H: 'DPL': redefinition
*** ERROR C231 IN LINE 56 OF ..\USER\STC89C51RC_RD_PLUS.H: 'DPH': redefinition
*** ERROR C231 IN LINE 57 OF ..\USER\STC89C51RC_RD_PLUS.H: 'PCON': redefinition
*** ERROR C231 IN LINE 58 OF ..\USER\STC89C51RC_RD_PLUS.H: 'TCON': redefinition
*** ERROR C231 IN LINE 59 OF ..\USER\STC89C51RC_RD_PLUS.H: 'TMOD': redefinition
*** ERROR C231 IN LINE 60 OF ..\USER\STC89C51RC_RD_PLUS.H: 'TL0': redefinition
*** ERROR C231 IN LINE 61 OF ..\USER\STC89C51RC_RD_PLUS.H: 'TL1': redefinition
*** ERROR C231 IN LINE 62 OF ..\USER\STC89C51RC_RD_PLUS.H: 'TH0': redefinition
*** ERROR C231 IN LINE 63 OF ..\USER\STC89C51RC_RD_PLUS.H: 'TH1': redefinition
*** ERROR C231 IN LINE 64 OF ..\USER\STC89C51RC_RD_PLUS.H: 'IE': redefinition
*** ERROR C231 IN LINE 65 OF ..\USER\STC89C51RC_RD_PLUS.H: 'IP': redefinition
*** ERROR C231 IN LINE 66 OF ..\USER\STC89C51RC_RD_PLUS.H: 'SCON': redefinition
*** ERROR C231 IN LINE 67 OF ..\USER\STC89C51RC_RD_PLUS.H: 'SBUF': redefinition
*** ERROR C231 IN LINE 70 OF ..\USER\STC89C51RC_RD_PLUS.H: 'AUXR': redefinition
*** ERROR C231 IN LINE 71 OF ..\USER\STC89C51RC_RD_PLUS.H: 'AUXR1': redefinition
*** ERROR C231 IN LINE 72 OF ..\USER\STC89C51RC_RD_PLUS.H: 'SADDR': redefinition
C51 COMPILER V9.01   NRF_24L01                                                             09/14/2018 10:56:56 PAGE 2   

*** ERROR C231 IN LINE 74 OF ..\USER\STC89C51RC_RD_PLUS.H: 'SADEN': redefinition
*** ERROR C231 IN LINE 106 OF ..\USER\STC89C51RC_RD_PLUS.H: 'CY': redefinition
*** ERROR C231 IN LINE 107 OF ..\USER\STC89C51RC_RD_PLUS.H: 'AC': redefinition
*** ERROR C231 IN LINE 108 OF ..\USER\STC89C51RC_RD_PLUS.H: 'F0': redefinition
*** ERROR C231 IN LINE 109 OF ..\USER\STC89C51RC_RD_PLUS.H: 'RS1': redefinition
*** ERROR C231 IN LINE 110 OF ..\USER\STC89C51RC_RD_PLUS.H: 'RS0': redefinition
*** ERROR C231 IN LINE 111 OF ..\USER\STC89C51RC_RD_PLUS.H: 'OV': redefinition
*** ERROR C231 IN LINE 112 OF ..\USER\STC89C51RC_RD_PLUS.H: 'P': redefinition
*** ERROR C231 IN LINE 115 OF ..\USER\STC89C51RC_RD_PLUS.H: 'TF1': redefinition
*** ERROR C231 IN LINE 116 OF ..\USER\STC89C51RC_RD_PLUS.H: 'TR1': redefinition
*** ERROR C231 IN LINE 117 OF ..\USER\STC89C51RC_RD_PLUS.H: 'TF0': redefinition
*** ERROR C231 IN LINE 118 OF ..\USER\STC89C51RC_RD_PLUS.H: 'TR0': redefinition
*** ERROR C231 IN LINE 119 OF ..\USER\STC89C51RC_RD_PLUS.H: 'IE1': redefinition
*** ERROR C231 IN LINE 120 OF ..\USER\STC89C51RC_RD_PLUS.H: 'IT1': redefinition
*** ERROR C231 IN LINE 121 OF ..\USER\STC89C51RC_RD_PLUS.H: 'IE0': redefinition
*** ERROR C231 IN LINE 122 OF ..\USER\STC89C51RC_RD_PLUS.H: 'IT0': redefinition
*** ERROR C231 IN LINE 125 OF ..\USER\STC89C51RC_RD_PLUS.H: 'EA': redefinition
*** ERROR C231 IN LINE 128 OF ..\USER\STC89C51RC_RD_PLUS.H: 'ES': redefinition
*** ERROR C231 IN LINE 129 OF ..\USER\STC89C51RC_RD_PLUS.H: 'ET1': redefinition
*** ERROR C231 IN LINE 130 OF ..\USER\STC89C51RC_RD_PLUS.H: 'EX1': redefinition
*** ERROR C231 IN LINE 131 OF ..\USER\STC89C51RC_RD_PLUS.H: 'ET0': redefinition
*** ERROR C231 IN LINE 132 OF ..\USER\STC89C51RC_RD_PLUS.H: 'EX0': redefinition
*** ERROR C231 IN LINE 137 OF ..\USER\STC89C51RC_RD_PLUS.H: 'PS': redefinition
*** ERROR C231 IN LINE 138 OF ..\USER\STC89C51RC_RD_PLUS.H: 'PT1': redefinition
*** ERROR C231 IN LINE 139 OF ..\USER\STC89C51RC_RD_PLUS.H: 'PX1': redefinition
*** ERROR C231 IN LINE 140 OF ..\USER\STC89C51RC_RD_PLUS.H: 'PT0': redefinition
*** ERROR C231 IN LINE 141 OF ..\USER\STC89C51RC_RD_PLUS.H: 'PX0': redefinition
*** ERROR C231 IN LINE 154 OF ..\USER\STC89C51RC_RD_PLUS.H: 'SM0': redefinition
*** ERROR C231 IN LINE 156 OF ..\USER\STC89C51RC_RD_PLUS.H: 'SM1': redefinition
*** ERROR C231 IN LINE 157 OF ..\USER\STC89C51RC_RD_PLUS.H: 'SM2': redefinition
*** ERROR C231 IN LINE 158 OF ..\USER\STC89C51RC_RD_PLUS.H: 'REN': redefinition
*** ERROR C231 IN LINE 159 OF ..\USER\STC89C51RC_RD_PLUS.H: 'TB8': redefinition
*** ERROR C231 IN LINE 160 OF ..\USER\STC89C51RC_RD_PLUS.H: 'RB8': redefinition
*** ERROR C231 IN LINE 161 OF ..\USER\STC89C51RC_RD_PLUS.H: 'TI': redefinition
*** ERROR C231 IN LINE 162 OF ..\USER\STC89C51RC_RD_PLUS.H: 'RI': redefinition
  23          
  24          #define uchar unsigned char
  25          
  26          
  27          uchar const TX_ADDRESS[TX_ADR_WIDTH]  = {0x34,0x43,0x10,0x10,0x01}; // Define a static TX address
  28          
  29          idata uchar rx_buf[TX_PLOAD_WIDTH];
  30          
  31          idata uchar tx_buf[TX_PLOAD_WIDTH];
  32          
  33          uchar flag;
  34          
  35          
  36          
  37          /**************************************************/
  38          
  39          
  40          
  41          //sbit LED1= P3^7;
  42          /**************************************************/
  43          unsigned char   bdata sta;
  44          
  45          sbit    RX_DR   =sta^6;
  46          
  47          sbit    TX_DS   =sta^5;
  48          
  49          sbit    MAX_RT  =sta^4;
C51 COMPILER V9.01   NRF_24L01                                                             09/14/2018 10:56:56 PAGE 3   

  50          /**************************************************/
  51          
  52          /**************************************************
  53          Function: init_io();
  54          Description:
  55            flash led one time,chip enable(ready to TX or RX Mode),
  56            Spi disable,Spi clock line init high
  57          /**************************************************/
  58          //#define KEY 0xaa
  59          
  60          void init_nrf24l01_io(void)
  61          {
  62   1              CE=0;                   // chip enable
  63   1              CSN=1;                  // Spi disable  
  64   1              SCK=0;                  // Spi clock line init high
  65   1              P2 = 0XFF;
  66   1      }
  67          /**************************************************
  68          Function: SPI_RW();
  69          
  70          Description:
  71            Writes one byte to nRF24L01, and return the byte read
  72            from nRF24L01 during write, according to SPI protocol
  73          /**************************************************/
  74          bdata unsigned char st=0;
  75          sbit st_1=st^0;
  76          sbit st_2=st^1;
  77          sbit st_3=st^2;
  78          sbit st_4=st^3;
  79          sbit st_5=st^4;
  80          sbit st_6=st^5;
  81          sbit st_7=st^6;
  82          sbit st_8=st^7;
  83          bdata unsigned char st1=0;
  84          sbit st_11=st1^0;
  85          sbit st_12=st1^1;
  86          sbit st_13=st1^2;
  87          sbit st_14=st1^3;
  88          sbit st_15=st1^4;
  89          sbit st_16=st1^5;
  90          sbit st_17=st1^6;
  91          sbit st_18=st1^7;
  92          /*
  93          uchar SPI_RW(uchar byte)
  94          {
  95                  uchar bit_ctr;
  96                  for(bit_ctr=0;bit_ctr<8;bit_ctr++)   // output 8-bit
  97                  {
  98                          MOSI = (byte & 0x80);         // output 'byte', MSB to MOSI
  99                          byte = (byte << 1);           // shift next bit into MSB..
 100                          SCK = 1;                      // Set SCK high..
 101                          MISO=1;
 102                          byte |= MISO;                     // capture current MISO bit
 103                          SCK = 0;                          // ..then set SCK low again
 104                  }
 105              return(byte);                         // return read byte
 106          }
 107          */
 108          
 109          uchar SPI_RW(uchar byte)
 110          {
 111   1              //uchar bit_ctr;
C51 COMPILER V9.01   NRF_24L01                                                             09/14/2018 10:56:56 PAGE 4   

 112   1      
 113   1          st=byte;
 114   1      
 115   1          MOSI=st_8;
 116   1          SCK = 1;
 117   1          st_18=MISO;
 118   1          SCK = 0;
 119   1      
 120   1          MOSI=st_7;
 121   1          SCK = 1;
 122   1          st_17=MISO;
 123   1          SCK = 0;
 124   1      
 125   1          MOSI=st_6;
 126   1          SCK = 1;
 127   1          st_16=MISO;
 128   1          SCK = 0;
 129   1      
 130   1          MOSI=st_5;
 131   1          SCK = 1;
 132   1          st_15=MISO;
 133   1          SCK = 0;
 134   1      
 135   1          MOSI=st_4;
 136   1          SCK = 1;
 137   1          st_14=MISO;
 138   1          SCK = 0;
 139   1      
 140   1          MOSI=st_3;
 141   1          SCK = 1;
 142   1          st_13=MISO;
 143   1          SCK = 0;
 144   1      
 145   1          MOSI=st_2;
 146   1          SCK = 1;
 147   1          st_12=MISO;
 148   1          SCK = 0;
 149   1      
 150   1          MOSI=st_1;
 151   1          SCK = 1;
 152   1          st_11=MISO;
 153   1          SCK = 0;
 154   1          return(st1);                          // return read byte
 155   1      }
 156          /**************************************************/
 157          
 158          /**************************************************
 159          Function: SPI_RW_Reg();
 160          
 161          Description:
 162            Writes value 'value' to register 'reg'
 163          /**************************************************/
 164          uchar SPI_RW_Reg(BYTE reg, BYTE value)
 165          {
 166   1              uchar status;
 167   1              CSN = 0;                   // CSN low, init SPI transaction
 168   1              status = SPI_RW(reg);      // select register
 169   1              SPI_RW(value);             // ..and write value to it..
 170   1              CSN = 1;                   // CSN high again
 171   1              return(status);            // return nRF24L01 status byte
 172   1      }
 173          /**************************************************/
C51 COMPILER V9.01   NRF_24L01                                                             09/14/2018 10:56:56 PAGE 5   

 174          
 175          /**************************************************
 176          Function: SPI_Read();
 177          
 178          Description:
 179            Read one byte from nRF24L01 register, 'reg'
 180          /**************************************************/
 181          BYTE SPI_Read(BYTE reg)
 182          {
 183   1              BYTE reg_val;
 184   1      
 185   1              CSN = 0;                // CSN low, initialize SPI communication...
 186   1              SPI_RW(reg);            // Select register to read from..
 187   1              reg_val = SPI_RW(0);    // ..then read registervalue
 188   1              CSN = 1;                // CSN high, terminate SPI communication
 189   1      
 190   1              return(reg_val);        // return register value
 191   1      }
 192          /**************************************************/
 193          
 194          /**************************************************
 195          Function: SPI_Read_Buf();
 196          
 197          Description:
 198            Reads 'bytes' #of bytes from register 'reg'
 199            Typically used to read RX payload, Rx/Tx address
 200          /**************************************************/
 201          uchar SPI_Read_Buf(BYTE reg, BYTE *pBuf, BYTE bytes)
 202          {
 203   1              uchar status,byte_ctr;
 204   1      
 205   1              CSN = 0;                                // Set CSN low, init SPI tranaction
 206   1              status = SPI_RW(reg);                   // Select register to write to and read status byte
 207   1      
 208   1              for(byte_ctr=0;byte_ctr<bytes;byte_ctr++)
 209   1              pBuf[byte_ctr] = SPI_RW(0);    // Perform SPI_RW to read byte from nRF24L01
 210   1      
 211   1              CSN = 1;                           // Set CSN high again
 212   1      
 213   1              return(status);                    // return nRF24L01 status byte
 214   1      }
 215          /**************************************************/
 216          
 217          /**************************************************
 218          Function: SPI_Write_Buf();
 219          
 220          Description:
 221            Writes contents of buffer '*pBuf' to nRF24L01
 222            Typically used to write TX payload, Rx/Tx address
 223          /**************************************************/
 224          uchar SPI_Write_Buf(BYTE reg, BYTE *pBuf, BYTE bytes)
 225          {
 226   1              uchar status,byte_ctr;
 227   1      
 228   1              CSN = 0;                   // Set CSN low, init SPI tranaction
 229   1              status = SPI_RW(reg);    // Select register to write to and read status byte
 230   1              for(byte_ctr=0; byte_ctr<bytes; byte_ctr++) // then write all byte in buffer(*pBuf)
 231   1              SPI_RW(*pBuf++);
 232   1              CSN = 1;                 // Set CSN high again
 233   1              return(status);          // return nRF24L01 status byte
 234   1      }
 235          /**************************************************/
C51 COMPILER V9.01   NRF_24L01                                                             09/14/2018 10:56:56 PAGE 6   

 236          
 237          /**************************************************
 238          Function: RX_Mode();
 239          
 240          Description:
 241            This function initializes one nRF24L01 device to
 242            RX Mode, set RX address, writes RX payload width,
 243            select RF channel, datarate & LNA HCURR.
 244            After init, CE is toggled high, which means that
 245            this device is now ready to receive a datapacket.
 246          /**************************************************/
 247          void power_off()
 248          {
 249   1          CE=0;
 250   1          SPI_RW_Reg(WRITE_REG + CONFIG, 0x0D); 
 251   1          CE=1;
 252   1          _delay_us(20);
 253   1      }
 254          
 255          void ifnnrf_rx_mode(void)
 256          {
 257   1          power_off();
 258   1              CE=0;
 259   1              SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH); // Use the same address on the RX devi
             -ce as the TX device
 260   1      
 261   1              SPI_RW_Reg(WRITE_REG + EN_AA, 0x01);      // Enable Auto.Ack:Pipe0
 262   1              SPI_RW_Reg(WRITE_REG + EN_RXADDR, 0x01);  // Enable Pipe0
 263   1              SPI_RW_Reg(WRITE_REG + RF_CH, 40);        // Select RF channel 40
 264   1              SPI_RW_Reg(WRITE_REG + RX_PW_P0, TX_PLOAD_WIDTH); // Select same RX payload width as TX Payload width
 265   1              SPI_RW_Reg(WRITE_REG + RF_SETUP, 0x07);   // TX_PWR:0dBm, Datarate:2Mbps, LNA:HCURR
 266   1              SPI_RW_Reg(WRITE_REG + CONFIG, 0x0f);     // Set PWR_UP bit, enable CRC(2 bytes) & Prim:RX. RX_DR enabl
             -ed..
 267   1      
 268   1              CE = 1; // Set CE pin high to enable RX device
 269   1      
 270   1        //  This device is now ready to receive one packet of 16 bytes payload from a TX device sending to addre
             -ss
 271   1        //  '3443101001', with auto acknowledgment, retransmit count of 10, RF channel 40 and datarate = 2Mbps.
 272   1      
 273   1      }
 274          /**************************************************/
 275          
 276          /**************************************************
 277          Function: TX_Mode();
 278          
 279          Description:
 280            This function initializes one nRF24L01 device to
 281            TX mode, set TX address, set RX address for auto.ack,
 282            fill TX payload, select RF channel, datarate & TX pwr.
 283            PWR_UP is set, CRC(2 bytes) is enabled, & PRIM:TX.
 284          
 285            ToDo: One high pulse(>10us) on CE will now send this
 286            packet and expext an acknowledgment from the RX device.
 287          /**************************************************/
 288          void ifnnrf_tx_mode(void)
 289          {
 290   1          power_off();
 291   1              CE=0;
 292   1              
 293   1              SPI_Write_Buf(WRITE_REG + TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);    // Writes TX_Address to nRF24L01
 294   1              SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH); // RX_Addr0 same as TX_Adr for Auto.Ac
C51 COMPILER V9.01   NRF_24L01                                                             09/14/2018 10:56:56 PAGE 7   

             -k
 295   1              SPI_Write_Buf(WR_TX_PLOAD, tx_buf, TX_PLOAD_WIDTH); // Writes data to TX payload
 296   1      
 297   1              SPI_RW_Reg(WRITE_REG + EN_AA, 0x01);      // Enable Auto.Ack:Pipe0
 298   1              SPI_RW_Reg(WRITE_REG + EN_RXADDR, 0x01);  // Enable Pipe0
 299   1              SPI_RW_Reg(WRITE_REG + SETUP_RETR, 0x1a); // 500us + 86us, 10 retrans...
 300   1              SPI_RW_Reg(WRITE_REG + RF_CH, 40);        // Select RF channel 40
 301   1              SPI_RW_Reg(WRITE_REG + RF_SETUP, 0x07);   // TX_PWR:0dBm, Datarate:2Mbps, LNA:HCURR
 302   1              SPI_RW_Reg(WRITE_REG + CONFIG, 0x0e);     // Set PWR_UP bit, enable CRC(2 bytes) & Prim:TX. MAX_RT & TX
             -_DS enabled..
 303   1              CE=1;
 304   1              _delay_us(200);
 305   1      }
 306          
 307          void SPI_CLR_Reg(BYTE R_T)
 308          {
 309   1              CSN = 0; 
 310   1              if(R_T==1)                  // CSN low, init SPI transaction
 311   1                      SPI_RW(FLUSH_TX);             // ..and write value to it..
 312   1              else
 313   1                      SPI_RW(FLUSH_RX);             // ..and write value to it..
 314   1              CSN = 1;                   // CSN high again
 315   1      }
 316          
 317          void ifnnrf_CLERN_ALL()
 318          {
 319   1        SPI_CLR_Reg(0);
 320   1        SPI_CLR_Reg(1);
 321   1        SPI_RW_Reg(WRITE_REG+STATUS,0xff);
 322   1        IRQ=1;
 323   1      }
 324          

C51 COMPILATION COMPLETE.  0 WARNING(S),  66 ERROR(S)
